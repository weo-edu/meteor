#!/bin/bash

BUNDLE_VERSION=0.2.5
# Replaced all the OS validation stuff because we don't use the dev bundle
# and we want it to run on Solaris
ARCH="X86_64"
UNAME="Linux"

# Find the script dir, following one level of symlink. Note that symlink
# can be relative or absolute. Too bad 'readlink -f' is not portable.
ORIG_DIR=$(pwd)
cd $(dirname "$0")
if [ -L "$(basename $0)" ] ; then
    cd $(dirname $(readlink $(basename "$0") ) )
fi
SCRIPT_DIR=$(pwd -P)
cd "$ORIG_DIR"



function install_dev_bundle {
    set -e
    trap "echo Failed to install dependency kit." EXIT

    TARBALL="dev_bundle_${UNAME}_${ARCH}_${BUNDLE_VERSION}.tar.gz"
    TMPDIR="$SCRIPT_DIR/dev_bundle.xxx"

    rm -rf "$TMPDIR"
    mkdir "$TMPDIR"

    if [ -f "$SCRIPT_DIR/$TARBALL" ] ; then
        echo "Skipping download and installing kit from $SCRIPT_DIR/$TARBALL"
        tar -xzf "$SCRIPT_DIR/$TARBALL" -C "$TMPDIR"
    else
        curl -# https://d3sqy0vbqsdhku.cloudfront.net/$TARBALL | tar -xzf - -C "$TMPDIR"
        test -x "${TMPDIR}/bin/node" # bomb out if it didn't work, eg no net
    fi

    mv "$TMPDIR" "$SCRIPT_DIR/dev_bundle"
    make -C "$SCRIPT_DIR/dev_bundle/lib/node_modules/mongodb/node_modules/bson/"

    echo "Installed dependency kit v${BUNDLE_VERSION} in dev_bundle."
    echo

    trap - EXIT
    set +e
}

if [ -d "$SCRIPT_DIR/.git" ] || [ -f "$SCRIPT_DIR/.git" ]; then
    # In a checkout.
    if [ ! -d "$SCRIPT_DIR/dev_bundle" ] ; then
        echo "It's the first time you've run Meteor from a git checkout."
        echo "I will download a kit containing all of Meteor's dependencies."
        install_dev_bundle
    elif [ ! -f "$SCRIPT_DIR/dev_bundle/.bundle_version.txt" ] ||
        grep -qvx "$BUNDLE_VERSION" "$SCRIPT_DIR/dev_bundle/.bundle_version.txt" ; then
        echo "Your dependency kit is out of date. I will download the new one."
        rm -rf "$SCRIPT_DIR/dev_bundle"
        install_dev_bundle
    fi

    DEV_BUNDLE="$SCRIPT_DIR/dev_bundle"
    METEOR="$SCRIPT_DIR/app/meteor/meteor.js"
else
    # In an install
    DEV_BUNDLE=$(dirname "$SCRIPT_DIR")
    METEOR="$DEV_BUNDLE/app/meteor/meteor.js"
fi


# Bump our file descriptor ulimit as high as it will go. This is a
# temporary workaround for dependancy watching holding open too many
# files: https://app.asana.com/0/364581412985/472479912325
if [ "$(ulimit -n)" != "unlimited" ] ; then
    ulimit -n 16384 > /dev/null 2>&1 || \
    ulimit -n 8192 > /dev/null 2>&1 || \
    ulimit -n 4096 > /dev/null 2>&1 || \
    ulimit -n 2048 > /dev/null 2>&1 || \
    ulimit -n 1024 > /dev/null 2>&1 || \
    ulimit -n 512 > /dev/null 2>&1
fi

export NODE_PATH="$DEV_BUNDLE/lib/node_modules"
exec "$DEV_BUNDLE/bin/node" "$METEOR" "$@"
